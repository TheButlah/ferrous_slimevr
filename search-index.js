var searchIndex = JSON.parse('{\
"firmware":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"server":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"skeletal_model":{"doc":"An experimental skeletal model for full body tracking …","t":[0,0,0,0,13,13,4,3,13,13,13,13,13,13,18,18,18,13,18,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,13,13,4,3,13,13,13,13,13,13,13,6,13,13,6,6,13,13,13,13,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["bone","conventions","prelude","skeleton","AnkleL","AnkleR","BoneKind","BoneMap","Chest","FootL","FootR","ForearmL","ForearmR","Hip","MAX","MIN","NUM_TYPES","Neck","ROOT","ThighL","ThighR","UpperArmL","UpperArmR","Waist","WristL","WristR","borrow","borrow","borrow_mut","borrow_mut","calibration_rotation","calibration_rotation_local","children","clone","clone","clone_into","clone_into","default","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from_i64","from_subset","from_subset","from_u64","hash","index","index_mut","into","into","into_iter","is_in_subset","is_in_subset","iter","iter","iter_mut","map","max","min","ne","new","num_types","parent","root","to_i64","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_u64","try_from","try_from","try_from","try_from","try_from","try_from_iter","try_into","try_into","type_id","type_id","forward_vec","right_vec","up_vec","AnkleL","AnkleR","BoneKind","BoneMap","Chest","FootL","FootR","ForearmL","ForearmR","Hip","Neck","Point","ThighL","ThighR","Translation","UnitQuat","UpperArmL","UpperArmR","Waist","WristL","WristR","Skeleton","SkeletonConfig","borrow","borrow","borrow_mut","borrow_mut","from","from","from_subset","from_subset","index","into","into","is_in_subset","is_in_subset","new","new","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["skeletal_model","","","","skeletal_model::bone","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skeletal_model::conventions","","","skeletal_model::prelude","","","","","","","","","","","","","","","","","","","","","skeletal_model::skeleton","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Contains skeletal bones and their relationships.","This module describes the mathematical conventions we …","","The skeleton, and its representation as a graph data …","","","<code>BoneKind</code> describes the fixed relationship between the …","Provides a map of <code>BoneKind</code> -&gt; <code>T</code>. Every possible <code>BoneKind</code> …","","","","","","","","","","","","","","","","","","","","","","","Returns the initial calibration pose of the bone. Rotating …","Returns the initial calibration pose of the bone, as a …","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","The <code>BoneKind</code> with the largest integer value","The <code>BoneKind</code> with the smallest integer value","","","Returns the number of different types of bones.","","The root bone type.","","","","","","","","","","","","","","","","","","","A vector in the “forward” or <code>-Z</code> direction","A vector in the “right” or <code>+X</code> direction","A vector in the “up” or <code>+Y</code> direction","","","<code>BoneKind</code> describes the fixed relationship between the …","Provides a map of <code>BoneKind</code> -&gt; <code>T</code>. Every possible <code>BoneKind</code> …","","","","","","","","","","","","","","","","","","","Used to initialize the <code>Skeleton</code> with its initial parameters","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new <code>Skeleton</code> from <code>SkeletonConfig</code>. Initially, the …","","","","","","","","","",""],"i":[0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,2,1,2,2,1,2,1,2,1,2,1,2,2,1,1,2,1,1,2,2,1,2,2,1,2,1,2,2,2,1,1,2,2,1,1,1,1,1,2,1,2,1,2,1,1,1,1,2,2,2,1,2,1,2,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,0,0,3,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["global",3,[["unitquat",6]]]],[[],["local",3,[["unitquat",6]]]],[[["",0]]],[[["",0]],["bonekind",4]],[[["",0]],["bonemap",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["bonemap",3]],[[["",0],["bonekind",4]],["bool",0]],[[["",0],["bonemap",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["bonemap",3]],[[]],[[["i64",0]],["option",4]],[[["",0]]],[[["",0]]],[[["u64",0]],["option",4]],[[["",0],["",0]]],[[["",0],["bonekind",4]]],[[["",0],["bonekind",4]]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["map",3,[["rangeinclusive",3,[["u8",0]]]]]],[[["",0]],["map",3,[["enumerate",3,[["iter",3]]]]]],[[["",0]],["map",3,[["enumerate",3,[["itermut",3]]]]]],[[],["bonemap",3]],[[],["bonekind",4]],[[],["bonekind",4]],[[["",0],["bonemap",3]],["bool",0]],[[]],[[],["usize",0]],[[["",0]],["option",4,[["bonekind",4]]]],[[]],[[["",0]],["option",4,[["i64",0]]]],[[["",0]]],[[["",0]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]],["option",4,[["u64",0]]]],[[],["result",4]],[[["usize",0]],["result",4]],[[["u8",0]],["result",4]],[[["hashmap",3,[["bonekind",4]]]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["unit",3,[["vector3",6,[["f32",0]]]]]],[[],["unit",3,[["vector3",6,[["f32",0]]]]]],[[],["unit",3,[["vector3",6,[["f32",0]]]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0],["bonekind",4]]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["bonemap",3,[["f32",0]]]]],[[["skeletonconfig",3]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[4,"BoneKind"],[3,"BoneMap"],[3,"SkeletonConfig"],[3,"Skeleton"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};