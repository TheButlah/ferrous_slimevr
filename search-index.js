var searchIndex = JSON.parse('{\
"firmware":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"server":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"skeletal_model":{"doc":"An experimental skeletal model for full body tracking …","t":[0,0,0,0,0,12,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,13,13,13,13,13,18,18,18,13,18,13,13,13,13,13,13,13,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,6,6,6,6,11,11,11,5,11,5,5,5,5,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,8,13,13,4,13,13,13,13,13,13,13,6,13,13,6,6,13,13,13,13,13,3,3,12,12,11,11,11,11,0,11,11,11,11,12,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,13,3,4,13,13,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11],"n":["bone","conventions","newtypes","prelude","skeleton","0","AnkleL","AnkleR","BoneKind","BoneMap","Chest","FootL","FootR","ForearmL","ForearmR","Hip","Neck","ThighL","ThighR","UpperArmL","UpperArmR","Waist","WristL","WristR","bone_kind","bone_map","borrow","borrow_mut","clone","clone_into","default","eq","equivalent","fmt","from","from","from_subset","index","index_mut","into","into_iter","is_in_subset","ne","to_owned","to_subset","to_subset_unchecked","try_from","try_from","try_from_iter","try_into","type_id","AnkleL","AnkleR","BoneKind","Chest","FootL","FootR","ForearmL","ForearmR","Hip","MAX","MIN","NUM_TYPES","Neck","ROOT","ThighL","ThighR","UpperArmL","UpperArmR","Waist","WristL","WristR","_IMPL_NUM_FromPrimitive_FOR_BoneKind","_IMPL_NUM_ToPrimitive_FOR_BoneKind","borrow","borrow_mut","calibration_rotation","calibration_rotation_local","children","clone","clone_into","eq","equivalent","fmt","from","from_i64","from_subset","from_u64","hash","into","is_in_subset","iter","max","min","num_types","parent","root","to_i64","to_owned","to_subset","to_subset_unchecked","to_u64","try_from","try_from","try_from","try_into","type_id","0","BoneMap","IntoIter","Iter","IterMut","MapIdxFnType","iter","iter_mut","map","map_idx","new","forward_vec","look_towards","right_vec","up_vec","0","0","Global","Local","borrow","borrow","borrow_mut","borrow_mut","default","default","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","from_subset","from_subset","impl_helper","into","into","is_in_subset","is_in_subset","ne","ne","private","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","Sealed","AnkleL","AnkleR","BoneKind","Chest","FootL","FootR","ForearmL","ForearmR","Hip","Neck","Point","ThighL","ThighR","Translation","UnitQuat","UpperArmL","UpperArmR","Waist","WristL","WristR","Skeleton","SkeletonConfig","bone_lengths","bone_map","borrow","borrow","borrow_mut","borrow_mut","edge","from","from","from_subset","from_subset","graph","index","into","into","is_in_subset","is_in_subset","new","new","node","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","Bone","Edge","EdgeKind","InputTracker","OutputTracker","borrow","borrow","borrow_mut","borrow_mut","calib_rot_l","calibration_rotation","clone","clone_into","eq","equivalent","fmt","from","from","from","from_subset","from_subset","hash","input_rot_g","input_rotation_mut","into","into","is_in_subset","is_in_subset","kind","kind","length","length","length_mut","ne","new","output_rot_g","output_rotation","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","0","Node","borrow","borrow_mut","default","fmt","from","from_subset","input_pos_g","input_position","input_position_mut","into","is_in_subset","new","output_pos_g","output_position","output_position_mut","to_subset","to_subset_unchecked","try_from","try_into","type_id"],"q":["skeletal_model","","","","","skeletal_model::bone","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skeletal_model::bone::bone_kind","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skeletal_model::bone::bone_map","","","","","","","","","","","skeletal_model::conventions","","","","skeletal_model::newtypes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skeletal_model::newtypes::private","skeletal_model::prelude","","","","","","","","","","","","","","","","","","","","skeletal_model::skeleton","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skeletal_model::skeleton::edge","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","skeletal_model::skeleton::edge::EdgeKind","skeletal_model::skeleton::node","","","","","","","","","","","","","","","","","","","",""],"d":["Describes skeletal bones and their relationships.","This module describes the mathematical conventions we …","Contains trivial “newtype” wrappers","Provides convenient re-exports of common types","The skeleton, and its representation as a graph data …","","","","Describes the various types of bones in the skeleton.","Provides a map of <code>BoneKind</code> -&gt; <code>T</code>. Every possible <code>BoneKind</code> …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Describes the various types of bones in the skeleton.","","","","","","","","","","","","","","","","","","","","","","","Returns the initial calibration pose of the bone. Rotating …","Returns the initial calibration pose of the bone, as a …","Returns the children of any particular bone.","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","The bone with the largest integer value","The bone with the smallest integer value","Returns the number of unique kinds of bones. This is …","The parent of a bone.","The root bone of the skeletal graph/tree.","","","","","","","","","","","","Provides a map of <code>BoneKind</code> -&gt; <code>T</code>. Every possible <code>BoneKind</code> …","","","","","Gets an iterator over the (key, value) pairs of the <code>BoneMap</code>…","Gets a mutable iterator over the <code>(key, value)</code> pairs of the …","Applies a function to each element of the <code>BoneMap</code>, mapping …","","","A vector in the “forward” or <code>-Z</code> direction","Creates a <code>UnitQuat</code> that corresponds to the local frame of …","A vector in the “right” or <code>+X</code> direction","A vector in the “up” or <code>+Y</code> direction","","","A newtype on <code>T</code> that indicates that it is a global …","A newtype on <code>T</code> that indicates that it is a local transform.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Implements <code>From&lt;T&gt; for $ident&lt;T&gt;</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Private helper trait to limit the types that can go in …","","","Describes the various types of bones in the skeleton.","","","","","","","","","","","","","","","","","","The <code>Skeleton</code> provides a way of reading, writing, and …","Used to initialize the <code>Skeleton</code> with its initial parameters","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new <code>Skeleton</code> from <code>SkeletonConfig</code>. Initially, the …","","","","","","","","","","","","Represents a regular bone in the skeleton.","<code>Edge</code>s represent the connections between the <code>Node</code>s of the …","The different kinds of edges.","Represents a tracker that is providing pose information as …","Represents a computed/synthetic tracker that will act as …","","","","","Local rotation of the edge with respect to the parent edge …","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Input rotation in global space. If it is unconstrained, it …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Length of the edge. May be set by the user, or may be …","","","","The output rotation of the edge. Solving the skeleton …","","","","","","","","","","","","","","<code>Node</code>s represent the connections between <code>Edge</code>s in the …","","","","","Returns the argument unchanged.","","Input position in global space. If it is unconstrained, it …","","","Calls <code>U::from(self)</code>.","","","The output position of the <code>Node</code>. Solving the skeleton …","","","","","","",""],"i":[0,0,0,0,0,1,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,1,1,1,0,1,0,0,0,0,3,4,0,0,3,4,3,4,3,4,3,4,3,4,3,4,3,3,3,4,4,4,3,4,0,3,4,3,4,3,4,0,3,4,3,4,3,4,3,4,3,4,0,2,2,0,2,2,2,2,2,2,2,0,2,2,0,0,2,2,2,2,2,0,0,5,6,5,6,5,6,0,5,6,5,6,6,6,5,6,5,6,5,6,0,5,6,5,6,5,6,5,6,5,6,7,0,0,7,7,8,7,8,7,8,8,7,7,7,7,7,8,7,7,8,7,7,8,8,8,7,8,7,8,8,8,8,8,7,8,8,8,7,8,7,8,7,8,7,8,7,8,7,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bonemap",3]],[[["",0],["",0]]],[[],["bonemap",3]],[[["",0],["bonemap",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["bonemap",3]],[[["",0]]],[[["",0],["bonekind",4]]],[[["",0],["bonekind",4]]],[[]],[[]],[[["",0]],["bool",0]],[[["",0],["bonemap",3]],["bool",0]],[[["",0]]],[[["",0]],["option",4]],[[["",0]]],[[["hashmap",3,[["bonekind",4]]]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["global",3,[["unitquat",6]]]],[[],["local",3,[["unitquat",6]]]],[[["",0]]],[[["",0]],["bonekind",4]],[[["",0],["",0]]],[[["",0],["bonekind",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["i64",0]],["option",4]],[[["",0]]],[[["u64",0]],["option",4]],[[["",0],["",0]]],[[]],[[["",0]],["bool",0]],[[],["map",3,[["rangeinclusive",3,[["u8",0]]]]]],[[],["bonekind",4]],[[],["bonekind",4]],[[],["usize",0]],[[["",0]],["option",4,[["bonekind",4]]]],[[]],[[["",0]],["option",4,[["i64",0]]]],[[["",0]]],[[["",0]],["option",4]],[[["",0]]],[[["",0]],["option",4,[["u64",0]]]],[[],["result",4]],[[["usize",0]],["result",4]],[[["u8",0]],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["iter",6]],[[["",0]],["itermut",6]],[[],["bonemap",3]],[[]],[[]],[[],["unit",3,[["vector3",6,[["f32",0]]]]]],[[["vector3",6],["vector3",6]],["unitquat",6]],[[],["unit",3,[["vector3",6,[["f32",0]]]]]],[[],["unit",3,[["vector3",6,[["f32",0]]]]]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["global",3]],[[],["local",3]],[[["",0],["global",3]],["bool",0]],[[["",0],["local",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["never",0]]],[[]],[[["never",0]]],[[]],[[]],[[["",0]]],[[["",0]]],null,[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["global",3]],["bool",0]],[[["",0],["local",3]],["bool",0]],null,[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],[[]],[[["",0]]],[[["",0]]],null,[[["",0],["bonekind",4]]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["bonemap",3,[["f32",0]]]]],[[["skeletonconfig",3]]],null,[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["local",3]],[[["",0]],["edgekind",4]],[[["",0],["",0]]],[[["",0],["edgekind",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["bonekind",4]],["edgekind",4]],[[]],[[["",0]]],[[["",0]]],[[["",0],["",0]]],null,[[["",0]],["option",4,[["global",3]]]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["edgekind",4]],null,[[["",0]],["f32",0]],null,[[["",0]],["f32",0]],[[["",0],["edgekind",4]],["bool",0]],[[["f32",0]]],null,[[["",0]],["global",3]],[[["",0]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["node",3]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]]],null,[[["",0]],["option",4,[["global",3]]]],[[["",0]],["option",4,[["global",3]]]],[[]],[[["",0]],["bool",0]],[[]],null,[[["",0]],["global",3]],[[["",0]],["global",3]],[[["",0]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"BoneMap"],[4,"BoneKind"],[3,"Global"],[3,"Local"],[3,"SkeletonConfig"],[3,"Skeleton"],[4,"EdgeKind"],[3,"Edge"],[13,"Bone"],[3,"Node"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};